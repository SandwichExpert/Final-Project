#!/usr/bin/env node

const http = require("http");
const socketIO = require("socket.io");
let app = require("../app");

let server = http.createServer(app);
// socket io please listen to this server
const io = socketIO(server);

server.on("error", error => {
  if (error.syscall !== "listen") {
    throw error;
  }
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

if (!process.env.PORT) process.env.PORT = 5000;

// wait for a connection event
// upon connection we execute a callback
// socket is the argument in clbk
// io.on("connection", socket => {
//   console.log("a user has connected");
//   socket.on("disconnect", () => {
//     console.log("a user disconnected");
//   });
//   socket.on("room", data => {
//     console.log("the room has been joined");
//     socket.join(data.room);
//   });
//   socket.on("leave room", data => {
//     console.log("room has been left");
//     socket.leave(data.room);
//   });
//   socket.on("new message", data => {
//     console.log("new message received");
//     console.log(data, "got data");
//     console.log(data.msg, "the new message");
//     socket.broadcast.to(data.room).emit("receive message", data);
//     console.log("message has been emitted");
//   });
// });
io.on("connection", function(socket) {
  console.log("a user connected");

  socket.on("disconnect", () => {
    console.log("a user disconnected");
  });
  socket.on("room", data => {
    console.log("the room has been joined");
    socket.join(data.room);
  });
  socket.on("leave room", data => {
    console.log("room has been left");
    socket.leave(data.room);
  });
  socket.on("new message", data => {
    console.log("new message received");
    console.log(data, "got data");
    console.log(data.msg, "the new message");
    socket.broadcast.to(data.room).emit("receive message", data);
    console.log("message has been emitted");
  });
  socket.on("new suggestion", data => {
    console.log(data.username, "new sugestion from user");
    console.log(data.lat, "on lat");
    console.log(data.lng, "on lng");
    socket.broadcast.to(data.room).emit("receive suggestion", data);
  });
  socket.on("chat message", function(msg) {
    console.log("message: " + JSON.stringify(msg));
    io.emit("chat message", msg);
    console.log(msg);
  });
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

module.exports = server;
